println:	cfunc(format: string, ...) -> null;
print:		cfunc(format: string, ...) -> null;
sqrt:		cfunc(n: float) -> float;

Vector2: struct {
	x: float;
	y: float;
}

Calculator: struct {
	pixel: Vector2;		/* current pixel position */
	absolute: Vector2;	/* current absolute position */
	screen: Vector2;	/* size of screen in pixels */
}

/* maps (n) from range [a, b] to range [c, d] */
map: (n: float, a: float, b: float, c: float, d: float) -> float {
	return (n - a) * (d - c) / (b - a) + c;
}

/* the function being graphed */
f: (x: float) -> float {
	return sqrt(x);
}

main: () -> null {
	
	calc: Calculator;
	save_y: float;
	y_pix: int;
	index: int;

	calc.pixel.x = 0;
	calc.pixel.y = 0;
	calc.absolute.x = 200;
	calc.absolute.y = 30;
	calc.screen.x = 30;
	calc.screen.y = 30;
	
	println(
		"graphing:\n\tx: [%f, %f]\n\ty: [%f, %f]",
		0, calc.absolute.x,
		0, calc.absolute.y
	);

	while calc.pixel.x < calc.screen.x {
		y_pix = f(map(calc.pixel.x, 0, calc.screen.x, 0, calc.absolute.x));
		index = calc.screen.y;
		while y_pix > 0 && y_pix < calc.screen.y {
			print(". ");
			y_pix = y_pix - 1;
			index = index - 1;
		}
		if y_pix < calc.screen.y {
			print("X ");
		}
		while index >= (y_pix < calc.screen.y) {
			print(". ");
			index = index - 1;
		}
		print("\n");
		calc.pixel.x = calc.pixel.x + 1;
	}	
		
}
